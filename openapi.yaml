openapi: 3.1.0
info:
  title: SkillPassChain Backend API
  version: 1.0.0
  description: |
    RESTful API for SkillPassChain, a platform for managing users, institutions, assessments, certifications, and topics.
    Includes authentication, admin creation, avatar upload, and document upload endpoints.
servers:
  - url: http://localhost:3000/api/v1
    description: Local development server
  - url: https://api.skillpasschain.com/api/v1
    description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        role:
          type: string
        avatarUrl:
          type: string
    Institution:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        address:
          type: string
    Assessment:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        score:
          type: integer
        takenBy:
          type: string
        createdBy:
          type: string
    Certification:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        issuedBy:
          type: string
        recipient:
          type: string
        issueDate:
          type: string
          format: date
    Topic:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        levels:
          type: integer
        isActive:
          type: boolean
        documentUrl:
          type: string
paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
  /auth/refresh:
    post:
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
  /auth/logout:
    post:
      summary: Logout
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logged out
  /admin/create-admin:
    post:
      summary: Create a new admin user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
      responses:
        '201':
          description: Admin created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users:
    post:
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
  /users/{id}/avatar:
    post:
      summary: Upload user avatar
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatarUrl:
                    type: string
  /institutions:
    post:
      summary: Create institution
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
      responses:
        '201':
          description: Institution created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
    get:
      summary: Get all institutions
      responses:
        '200':
          description: List of institutions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Institution'
  /institutions/{id}:
    get:
      summary: Get institution by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Institution found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
    put:
      summary: Update institution
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
      responses:
        '200':
          description: Institution updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
    delete:
      summary: Delete institution
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Institution deleted
  /assessments:
    post:
      summary: Create assessment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assessment'
      responses:
        '201':
          description: Assessment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
    get:
      summary: Get all assessments
      responses:
        '200':
          description: List of assessments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assessment'
  /assessments/{id}:
    get:
      summary: Get assessment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Assessment found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
    put:
      summary: Update assessment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assessment'
      responses:
        '200':
          description: Assessment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
    delete:
      summary: Delete assessment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Assessment deleted
  /assessments/{id}/complete:
    put:
      summary: Complete assessment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: integer
      responses:
        '200':
          description: Assessment completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
  /assessments/user/{userId}:
    get:
      summary: Get user assessments
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of assessments for user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assessment'
  /certifications:
    post:
      summary: Create certification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certification'
      responses:
        '201':
          description: Certification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
    get:
      summary: Get all certifications
      responses:
        '200':
          description: List of certifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Certification'
  /certifications/{id}:
    get:
      summary: Get certification by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Certification found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
    put:
      summary: Update certification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certification'
      responses:
        '200':
          description: Certification updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
    delete:
      summary: Delete certification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Certification deleted
  /certifications/user/{userId}:
    get:
      summary: Get user certifications
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of certifications for user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Certification'
  /topics:
    post:
      summary: Create topic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        '201':
          description: Topic created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
    get:
      summary: Get all topics
      responses:
        '200':
          description: List of topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
  /topics/{id}:
    get:
      summary: Get topic by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Topic found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
    put:
      summary: Update topic
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        '200':
          description: Topic updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
    delete:
      summary: Delete topic
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Topic deleted
  /topics/{id}/active:
    patch:
      summary: Activate/deactivate topic
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isActive:
                  type: boolean
      responses:
        '200':
          description: Topic activation updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
  /topics/{id}/upload:
    post:
      summary: Upload document for topic
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                document:
                  type: string
                  format: binary
          application/json:
            schema:
              type: object
              properties:
                documentUrl:
                  type: string
      responses:
        '200':
          description: Document uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
  /health:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
security:
  - bearerAuth: []
